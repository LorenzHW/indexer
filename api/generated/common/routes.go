// Package common provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"NnX8iwGu8+3i9qfb/wkAAP//U0aAljWxAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
